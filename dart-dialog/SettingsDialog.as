/*** Copyright (c) 2013, Adobe Systems Inc.* All rights reserved.* * Redistribution and use in source and binary forms, with or without modification, are permitted provided * that the following conditions are met:* - Redistributions of source code must retain the above copyright notice, this list of conditions and the *   following disclaimer.* - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and *   the following disclaimer in the documentation and/or other materials provided with the distribution.* - Neither the name of Adobe Systems Inc. nor the names of its contributors may be used to endorse or *   promote products derived from this software without specific prior written permission.* * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package  {		import flash.display.Sprite;	import fl.controls.CheckBox;	import flash.display.SimpleButton;	import flash.text.TextField;	import flash.events.FocusEvent;	import flash.events.Event;	import adobe.utils.XMLUI;	import flash.display.MovieClip;	import com.gskinner.easelexport.DashedUnderline;	import flash.display.InteractiveObject;	import flash.events.MouseEvent;	import JSFL;	import Locale;	import flash.geom.ColorTransform;	import flash.system.Capabilities;	import flash.events.KeyboardEvent;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.text.TextFormat;	import fl.managers.StyleManager;	import com.gskinner.controls.CS7Button;	import com.gskinner.controls.CS7TextInput;	import fl.controls.BaseButton;	import fl.controls.TextInput;	public class SettingsDialog extends Sprite {			// Constants:			// Public Properties:		public var bg:Sprite;			public var outputFld:TextInput;		public var outputLbl:TextField;		public var outputIco:Sprite;		public var outputBtn:BaseButton;		public var htmlCheck:CheckBox;				public var imagesPathFld:TextInput;		public var imagesPathLbl:TextField;		public var imagesCheck:CheckBox;		public var soundsPathFld:TextInput;		public var soundsPathLbl:TextField;		public var soundsCheck:CheckBox;				public var webNSFld:TextInput;		public var webNSLbl:TextField;		public var libNSFld:TextInput;		public var libNSLbl:TextField;				public var hiddenCheck:CheckBox;		public var compactPathsCheck:CheckBox;				protected var labelFlds:Vector.<TextField>;		protected var titleFlds:Vector.<TextField>;		protected var editableFlds:Vector.<TextInput>;		protected var checkBoxes:Vector.<CheckBox>;		protected var tabList:Vector.<InteractiveObject>;		protected var underlines:Vector.<DashedUnderline>;				protected var outputPath:String;		protected var fldText:String;			// Protected Properties:			// Initialization:		public function SettingsDialog() {			Locale.onComplete = init;			Locale.load(JSFL.isDebug ? "strings.xml" : JSFL.call("getLocaleURI"));			StyleManager.setStyle('focusRectPadding', 1);		}			// Public getter / setters:			// Public Methods:					// Protected Methods:		protected function init(evt:Event=null):void {			configUI();			setData(XMLUI.getProperty("data"));						// listen to controls' data changes 			addEventListener(Event.CHANGE, handleChangeEvent);						//var focusTimer:Timer = new Timer(200, 1); // adding a short timer to let the dialog load			//focusTimer.addEventListener(TimerEvent.TIMER, focusTimerHandler);			//focusTimer.start();		}				protected function focusTimerHandler(event:TimerEvent):void {			// check if the JS API exists before calling it, since it won't be in original CS6 release			JSFL.run("if (fl.xmlui.setFocus) { fl.xmlui.setFocus('swf'); }");						// now set the focus to the first text input field and select all text			var toFocus:TextInput = outputFld; //imagesPathFld;			stage.focus = toFocus; 			toFocus.setSelection(toFocus.text.length, toFocus.text.length);		}					protected function configUI():void {									outputIco.mouseEnabled = false;						titleFlds = Vector.<TextField>([publishSettingsLbl, assetsLbl, namespacesLbl, optionsLbl]);			labelFlds = Vector.<TextField>([outputLbl, imagesPathLbl, soundsPathLbl, webNSLbl, libNSLbl ]);			editableFlds = Vector.<TextInput>([outputFld, imagesPathFld, soundsPathFld, webNSFld, libNSFld]);			checkBoxes = Vector.<CheckBox>([htmlCheck, hiddenCheck, compactPathsCheck, imagesCheck, soundsCheck]);			tabList = Vector.<InteractiveObject>([htmlCheck,												  imagesPathFld, imagesCheck, libNSFld,												  soundsPathFld, soundsCheck, 												  												  hiddenCheck, compactPathsCheck]);						//underlines = new Vector.<DashedUnderline>();			for (var i:uint=0,l:uint=editableFlds.length; i<l; i++) {				var fld:TextInput = editableFlds[i] as TextInput;				//underlines.push(new DashedUnderline(fld));				fld.maxChars = 30;				fld.addEventListener(FocusEvent.FOCUS_IN, handleFldFocusIn);			}						outputBtn.addEventListener(MouseEvent.CLICK, handleOutputClick);						FontManager.init(macText.defaultTextFormat.font, macTextBold.defaultTextFormat.font, windowsText.defaultTextFormat.font, windowsText.defaultTextFormat.font);			FontManager.setupContainer(this, {outputFld:true, imagesPathFld:true, soundsPathFld:true, libNSFld:true}, {publishSettingsLbl:true, assetsLbl:true, namespacesLbl:true, optionsLbl:true});									applyLocale();			applyTheme();						stage.stageFocusRect = false;						setChildIndex(bg, 0);		}				protected function applyLocale():void {			publishSettingsLbl.text =	Locale.get("EJS_UI_TITLE_EXPORT_SETTINGS");//.toUpperCase();			outputLbl.text =			Locale.get("EJS_UI_LABEL_OUTPUT");			htmlCheck.label =			Locale.get("EJS_UI_LABEL_EXPORT_HTML");						assetsLbl.text =			Locale.get("EJS_UI_TITLE_ASSETS");//.toUpperCase();			imagesPathLbl.text =		Locale.get("EJS_UI_LABEL_IMAGES");			soundsPathLbl.text =		Locale.get("EJS_UI_LABEL_SOUNDS");						namespacesLbl.text =		Locale.get("EJS_UI_TITLE_NAMESPACES");//.toUpperCase();			webNSLbl.text =				Locale.get("EJS_UI_LABEL_WEB");			libNSLbl.text =				Locale.get("EJS_UI_LABEL_LIB");						optionsLbl.text =			Locale.get("EJS_UI_TITLE_OPTIONS");//.toUpperCase();			hiddenCheck.label =			Locale.get("EJS_UI_LABEL_HIDDEN_LAYERS");			compactPathsCheck.label =	Locale.get("EJS_UI_LABEL_COMPACT_PATHS");		}				protected function applyTheme():void {			ThemeManager.updateTheme();						var hotColor:uint = ThemeManager.getParam('themeHotTextNormalColor');			var staticColor:uint = ThemeManager.getParam('themeStaticTextNormalColor');			var ctf:ColorTransform = bg.transform.colorTransform;			ctf.color = ThemeManager.getParam('themeAppBackgroundColor');			bg.transform.colorTransform = ctf;						ctf = outputIco.transform.colorTransform;			ctf.color = ThemeManager.getParam('themeGenericIconNormal');			outputIco.transform.colorTransform = ctf;			var fld:TextField;			var tf:TextFormat = StyleManager.getStyle('textFormat') as TextFormat;			var tf2:Object = ThemeManager.cloneTextFormat(tf);// as TextFormat;			tf.color = staticColor;			tf2.color = 0x0;			StyleManager.setStyle('textFormat', tf);												var ti:TextInput;			for (var i:int=0, l:int=editableFlds.length; i<l; i++) {				ti = editableFlds[i];				ti.setStyle('textFormat', tf2);								}						for (i=0, l=titleFlds.length; i<l; i++) {				fld = titleFlds[i];				tf = fld.getTextFormat();				tf.color = staticColor;				fld.setTextFormat(fld.defaultTextFormat=tf);			}						for (i=0, l=labelFlds.length; i<l; i++) {				fld = labelFlds[i];				tf = fld.getTextFormat();				tf.color = staticColor;				fld.setTextFormat(fld.defaultTextFormat=tf);			}					}				protected function handleFldFocusIn(evt:FocusEvent):void {			var fld:TextInput = evt.currentTarget as TextInput;			fldText = fld.text;			fld.addEventListener(FocusEvent.FOCUS_OUT, handleFldFocusOut);		}				protected function handleFldFocusOut(evt:FocusEvent):void {			var fld:TextInput = evt.currentTarget as TextInput;			fld.removeEventListener(FocusEvent.FOCUS_OUT, handleFldFocusOut);			if (fld.text == "") { fld.text = fldText; }		}						protected function handleChangeEvent(evt:Event):void {			var o = {};						o.outputPath = outputFld.text;			o.exportHTML = htmlCheck.selected;						o.imagesPath = imagesPathFld.text||"";			o.exportImages = imagesCheck.selected;			o.soundsPath = soundsPathFld.text||"";			o.exportSounds = soundsCheck.selected;						o.webNS = webNSFld.text||"";			o.libNS = libNSFld.text||"";						o.includeHiddenLayers = hiddenCheck.selected;			o.compactPaths = compactPathsCheck.selected;						XMLUI.setProperty("data", JSFL.serialize(o));		}				protected function setData(data:String):void {			var o:Object = JSFL.deserialize(data);			if (o  == null) {				JSFL.run('alert("An error occurred. No data was passed to settings dialog.");');				XMLUI.cancel();				return;			}						outputPath = o.outputPath;			htmlCheck.selected = o.exportHTML == "true";						imagesPathFld.text = o.imagesPath;			imagesCheck.selected = o.exportImages == "true";			soundsPathFld.text = o.soundsPath;			soundsCheck.selected = o.exportSounds == "true";						webNSFld.text = o.webNS || "web";			libNSFld.text = o.libNS || "lib";						hiddenCheck.selected = o.includeHiddenLayers == "true";			compactPathsCheck.selected = o.compactPaths == "true";						displayOutputPath();			/*			for (var i:uint=0, l:uint=underlines.length; i<l; i++) {				underlines[i].update();			}			*/		}						protected function handleOutputClick(evt:MouseEvent):void {			var path:String = JSFL.call("browseForOutputPath");			if (path && path != "null") {				outputPath = path;				displayOutputPath();				handleChangeEvent(evt);			}		}				protected function displayOutputPath():void {			//var path:String = JSFL.call("getDisplayPath",outputPath)||"";			var path:String = JSFL.call("getOutputPath",outputPath)||"";			outputFld.text = path;			outputFld.setSelection(path.length, path.length);		}	}	}